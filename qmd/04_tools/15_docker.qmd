---
title: Docker
---



# Docker

## install

1. install docker

<https://docs.docker.com/engine/install/binaries/>


<https://www.kali.org/docs/containers/installing-docker-on-kali/>

2. docker basic commnad


```bash
# docker version
# containers
docker ps
docker ps -a
docker stop <id>

# showing images
docker images
# remove images
docker rmi

# pull images 
docker pull <iamge>

# pull and run images
docker run <iamge:tag>

# run ubuntu
docker run ubuntu sleep 100 

# run: attach detached
docker run -d <container>

docker attach <id>

# inspect containder
docker inspect <id>

# check logs
docker logs <id>

```


3. docker params


    * -i: interactive mode

    * -t: pesuodo terminal

    * -p: port mapping

        each container has its own ip, which can only be acessed in containder host
    
    * -v: volumn mappping -> data persistent

    * -e: set enviroment variables

4. create images

```docker-file
FROM Ubuntu

RUN apt-get update
RUN apt-get install python

RUN pip install flask

COPY . ???

ENTRYPOINT ???

CMD ["command", "param1"]

```

`docker build Dockerfile -t <image_name>`


## Docker app

### rstudio config

1. Have a rstudio in docker(version=4.2)

<https://rocker-project.org/images/versioned/rstudio.html>

https://hub.docker.com/r/rocker/rstudio

```docker
# pull images (Make sure the version is what you want)
docker pull rocker/rstudio:4.2

# run it (should not change the image port in this case), with password
# inorder to make it configuration persistent, your should map the /home/rstudio/ directory with the same directory(In which you saved the configurations previously)
docker run --rm -ti -e PASSWORD=<passwd> -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/ -p 8686:8787 rocker/rstudio:4.2

# how to make packages persistent and rstudio configs persistent 
# 1) Check the libs path `.libPaths()`
# 2) rewrite the `.Renviron` with  `R_LIBS_USER` and `R_LIBS`
# 3) relaod `R` and install the packages
# 4) your could check the `r_lib` fold first then reload the docker images to see if the package could be reloaded
mkdir ~/.Renviron
R_LIBS_USER=/home/rstudio/r_lib
R_LIBS=/home/rstudio/r_lib:/usr/local/lib/R/site-library:/usr/local/lib/R/library


# mount a second volumn
docker run --rm -ti \
    -e PASSWORD=happy_password\
    -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/\
    -v /home/keke/data/:/home/rstudio/data/\
    -p 8686:8787 \
    rocker/rstudio:4.2
# run in background(--detached -d)
docker run --rm -ti \
    -e PASSWORD=happy_password\
    -d\
    -v /home/keke/data2/docker/rstudio/rs1:/home/rstudio/\
    -v /home/keke/data/:/home/rstudio/data/\
    -p 8686:8787 \
    rocker/rstudio:4.2

# stop it 
docker stop <CONTAINER ID>
```

### run docker without root permission


### run ubuntu

```bash
docker run ubuntu sleep 5


```


### docker network

    * bride[default]:  `docker run ubuntu`

    * none:  `docker run ubuntu --network=none`

    * host:  `docker run ubuntu --network=host`

    * create sub network

### volumns

`docker volumne create data_volumn` 

    * -v

    * --mount


### docker-compose


### docker registry


1. private

```bash
docker run -d --name registry

docker image tag my-image localhost:5000/my-image
docker push localhost:5000/my-image
docker pull localhost:5000/my-image

```

### orchestrate


### docker swarm

```
docker service --replicas=3 my-web

```

### kubernetes

# exercise

## 1) create a rstudio images

1. What to containrize?

    * ubuntu
    * rstudio
    * r
    * r-packages
    * others

2. 






## 2) wordpress with docker


### option 1. build your own docker file
https://github.com/aschmelyun/docker-compose-wordpress



### option2: pull official website



## 3) discuz with docker




