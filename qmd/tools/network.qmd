---
title: Network
---


# Nginx

1. how to proxy?

2. who to reverse proxy?

3. how to add https



1. `nginx.conf` contains

    1. http
        serve the directory

    2. events


    3. `MINE`

        nigix comes with default MINE types

    4. location

        `alias`

    5. try_files


    6. rewrite and redirect

    ```nginx
    http {
        # MINE teypes
        #types {
        #    text/css css;
        #    text/html html;
        #}

        include mime.types

        # server
        server {
            listen 80;
            root /path;

            # get locations
            location /fruits{
                root /path ;
            }

            location /carbs{
                alias /path/fruits;

            }

            # try files
            location /veges{
                root /path;
                try_files /veges/vege.html /veges/index.html = 404;
            }

            # count regular expression ~* => regular expression
            location ~* /count/[0-9]{
                root /path
                try_files /index.html =404;
            }

            # return
            location /crops {
                return 307 /fruits;
            }

            # rewrite/redirect
            rewrite ^/number/(\w+) /counts/$1
        }
    }

    ```


2. load balancer


# setup a squid server

<https://www.digitalocean.com/community/tutorials/how-to-set-up-squid-proxy-on-ubuntu-20-04>

```bash
# 1) install
apt-get install squid
systemctl status squid

# 2) allow ip, find `http_access deny ` to allow or deny ip, could set `http_access allow all`
vim /etc/squid/squid.conf

# 3) set password
apt install apache2-utils
htpasswd -c /etc/squid/passwords <user_name>

# 4) check 
cat /etc/squid/passwords

# 5) reopen, add params for authentication
vim /etc/squid/squid.conf

# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
#
include /etc/squid/conf.d/*
#######################ADD#########################
auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid/passwords
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
#######################ADD#########################

# Example rule allowing access from your local networks.
acl localnet src your_ip_address
# Adapt localnet in the ACL section to list your (internal) IP networks
# from where browsing should be allowed
#http_access allow localnet
http_access allow localhost

#######################ADD#########################
http_access allow authenticated
#######################ADD#########################

# And finally deny all other access to this proxy
http_access deny all

# 6) you could change the port if you want
ufw allow 7001
vim /etc/squid/squid.conf

http_port 3128

# 7) test it 

curl -OJ  https://api.gdc.cancer.gov/data/c0008693-0583-4eac-bd5c-583070763893   --proxy "http://<user_name>:<passwd>@<address>:<port>"

```

# how to monitor the network dataflow







# Docker

## install

1. install docker

<https://docs.docker.com/engine/install/binaries/>


<https://www.kali.org/docs/containers/installing-docker-on-kali/>



2. docker basic commnad


```bash
# docker version
# containers
docker ps
docker ps -a
docker stop <id>

# showing images
docker images
# remove images
docker rmi

# pull images 
docker pull <iamge>

# pull and run images
docker run <iamge:tag>

# run ubuntu
docker run ubuntu sleep 100 

# run: attach detached
docker run -d <container>

docker attach <id>

# inspect containder
docker inspect <id>

# check logs
docker logs <id>

```


3. docker params


    * -i: interactive mode

    * -t: pesuodo terminal

    * -p: port mapping

        each container has its own ip, which can only be acessed in containder host
    
    * -v: volumn mappping -> data persistent

    * -e: set enviroment variables



4. create images


```docker-file
FROM Ubuntu

RUN apt-get update
RUN apt-get install python

RUN pip install flask

COPY . ???

ENTRYPOINT ???

CMD ["command", "param1"]

```

`docker build Dockerfile -t <image_name>`


## Docker app

### rstudio config

1. Have a rstudio in docker(version=4.2)

<https://rocker-project.org/images/versioned/rstudio.html>

https://hub.docker.com/r/rocker/rstudio

```docker
# pull images (Make sure the version is what you want)
docker pull rocker/rstudio:4.2

# run it (should not change the image port in this case), with password
# inorder to make it configuration persistent, your should map the /home/rstudio/ directory with the same directory(In which you saved the configurations previously)
docker run --rm -ti -e PASSWORD=<passwd> -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/ -p 8686:8787 rocker/rstudio:4.2

# how to make packages persistent and rstudio configs persistent 
# 1) Check the libs path `.libPaths()`
# 2) rewrite the `.Renviron` with  `R_LIBS_USER` and `R_LIBS`
# 3) relaod `R` and install the packages
# 4) your could check the `r_lib` fold first then reload the docker images to see if the package could be reloaded
mkdir ~/.Renviron
R_LIBS_USER=/home/rstudio/r_lib
R_LIBS=/home/rstudio/r_lib:/usr/local/lib/R/site-library:/usr/local/lib/R/library


# mount a second volumn
docker run --rm -ti \
    -e PASSWORD=happy_password\
    -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/\
    -v /home/keke/data/:/home/rstudio/data/\
    -p 8686:8787 \
    rocker/rstudio:4.2

# run in background(--detached -d)
docker run --rm -ti \
    -e PASSWORD=happy_password\
    -d\
    -v /home/keke/data2/docker/rstudio/rs1:/home/rstudio/\
    -v /home/keke/data/:/home/rstudio/data/\
    -p 8686:8787 \
    rocker/rstudio:4.2

# stop it 
docker stop <CONTAINER ID>
```

### run docker without root permission


### run ubuntu

```bash
docker run ubuntu sleep 5


```


### docker network

    * bride[default]:  `docker run ubuntu`

    * none:  `docker run ubuntu --network=none`

    * host:  `docker run ubuntu --network=host`

    * create sub network

### voumnes

`docker volumne create data_volumn` 

    * -v

    * --mount


### docker-compose


### docker registry


1. private

```bash
docker run -d --name registry

docker image tag my-image localhost:5000/my-image
docker push localhost:5000/my-image
docker pull localhost:5000/my-image

```

### orchestrate


### docker swarm

```
docker service --replicas=3 my-web

```

### kubernetes

