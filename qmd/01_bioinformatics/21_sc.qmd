---
title: single cell
---

# single cell annotation

please go to: [https://sci-hub.mksa.top/10.1038/s41596-021-00534-0]


# single cell technology

* 10X


* SMART-seq


# analysis tools:

    * R

        - Seurat

        - Monocle

    * Python

        - scanpy

        - svitools



# Cellranger

https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov

https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest

install cellranger

PATH=$PATH:/home/keke/app/cellranger-7.1.0/bin

intall bcl2fastq2

https://support.illumina.com/downloads/bcl2fastq-conversion-software-v2-20.html

mamba  install -c dranew bcl2fastq

get reference

curl -O https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz


## example

1. Download example data

    ```
    curl -O https://cf.10xgenomics.com/supp/cell-exp/cellranger-tiny-bcl-1.2.0.tar.gz
    curl -O https://cf.10xgenomics.com/supp/cell-exp/cellranger-tiny-bcl-simple-1.2.0.csv
    tar -zxvf cellranger-tiny-bcl-1.2.0.tar.gz
    ```
2. mdkfastq

    ```
    cellranger mkfastq --id=tutorial_walk_through \
        --run=cellranger-tiny-bcl-1.2.0 \
        --csv=cellranger-tiny-bcl-simple-1.2.0.csv
    ```

3. count

    ```
    curl -O  https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_fastqs.tar
    /home/keke/data2/app/cellranger-7.1.0/cellranger count \
        --id=run_count_1kpbmcs \
        --fastqs=pbmc_1k_v3_fastqs \
        --sample=pbmc_1k_v3 \
        --transcriptome=/home/keke/data2/ref/refdata-gex-GRCh38-2020-A\
        --noexit
    ```

4. count on raw fastq file

    suffix1： _S1_L001_R1_001.fastq.gz
    suffix2： _S1_L001_R2_001.fastq.gz

    * test data1
        zcat sample_name_S1_L001_R1_001.fastq.gz | head -n 100000 > sample_1_S1_L001_R1_001.fastq
        
        zcat sample_name_S1_L001_R2_001.fastq.gz | head -n 100000 > sample_1_S1_L001_R2_001.fastq

        gzip sample_1_S1_L001_R*fastq

    * test data2
        ln -s /home/keke/base/raw/HRA003647/HRR858162/HRR858162_f1.fastq.gz sample_name_S1_L001_R1_001.fastq.gz
        ln -s /home/keke/base/raw/HRA003647/HRR858162/HRR858162_r2.fastq.gz  sample_name_S1_L001_R2_001.fastq.gz  

    ```
    /home/keke/data2/app/cellranger-7.1.0/cellranger count \
        --id=out \
        --fastqs=sample_dir \
        --sample=sample_name \
        --transcriptome=/home/keke/data2/ref/refdata-gex-GRCh38-2020-A
    ```

## snakemake

```
import pandas as pd
import os
class sampleInfo:
    def __init__(self,input_file,samples_file_index = ["sample","reads"],file = "file_position"):
        # the input params
        self.input_file = input_file
        self.samples_file_index = samples_file_index
        self.sample_name = samples_file_index[0]
        self.sample_end = samples_file_index[1]
        self.file = file

    def run(self):
        if self.input_file.endswith("csv"):
            self.samples_df = pd.read_csv(self.input_file)
        elif self.input_file.endswith("txt") or self.input_file.endswith("tsv"):
            self.samples_df = pd.read_table(self.input_file,sep = "\s+")
        else:
            print("please supply sample metadata with csv/txt/tsv format!")
            exit("###############################\nThere is something wrong, you know, I only accept the files with csv/txt/tsv extension!\n###############################")

        # 1) get all the samples
        self.samples = self.samples_df[self.sample_name].unique()
        
        # 2) change all reads to upper cases
        self.samples_df[self.sample_end] = self.samples_df[self.sample_end].str.upper()

        # 3) set index
        self.samples_df.set_index(self.samples_file_index,inplace=True)
    
    def R1(self,wildcards):
        return self.samples_df.loc[wildcards.sample].at["R1",self.file]

    def R2(self,wildcards):
        return self.samples_df.loc[wildcards.sample].at["R2",self.file]
    def getSampleName(self,wildcards):
        return str(wildcards.sample)


#############################################
# load configs
#############################################

samples_info = sampleInfo("sample.csv")
# parse samples
samples_info.run()
samples = samples_info.samples
print(samples)

# prepare dirs
fastqs = "/home/keke/base/raw/processed/HRA003647/fastqs"
output = "/home/keke/base/raw/processed/HRA003647/output"


# suffix
suffix1 = "_S1_L001_R1_001.fastq.gz"
suffix2 = "_S1_L001_R2_001.fastq.gz"

#############################################
# Rules
#############################################

rule all:
    input:
        #expand(str(os.path.join(fastqs,"{sample}")) + suffix2,sample=samples)
        expand(str(os.path.join(output,"{sample}")),sample=samples)

rule step_1_createSoftLink:
    input:
        r1 = samples_info.R1,
        r2 = samples_info.R2
    output:
        fq1 = str(os.path.join(fastqs,"{sample}")) + suffix1,
        fq2 = str(os.path.join(fastqs,"{sample}")) + suffix2
    shell:
        """
        ln -s {input.r1} {output.fq1}
        ln -s {input.r2} {output.fq2}
        """

rule step_2_cellrangerCount:
    input: 
        fq1 = str(os.path.join(fastqs,"{sample}")) + suffix1,
        fq2 = str(os.path.join(fastqs,"{sample}")) + suffix2,
        fastqs = fastqs,
        output = output
    output:
        output_dir = str(os.path.join(output,"{sample}"))
    shell:
        """
        cd {input.output};
        /home/keke/data2/app/cellranger-7.1.0/cellranger count \
            --id={wildcards.sample} \
            --fastqs={input.fastqs} \
            --sample={wildcards.sample} \
            --transcriptome=/home/keke/data2/ref/refdata-gex-GRCh38-2020-A
        """
```

4 Q&A

    1. fastq-input for cellranger?

        * https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/fastq-input

    2. How to do when facing erros?

        * google

        * re-run

        * re-boot

        * pray to god