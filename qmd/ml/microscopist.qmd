---
title: Python for microscopist
---

# Aims

* processing HE

* processing immune staining

* 


# Images


## images in python


# IO

* PIL

* matplotlib

* skimage

* openCV



1. basic usages

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
images_file = '/home/keke/data/web/python_for_microscopists/images/test_image.jpg'
images_file_czi = '/home/keke/data/web/python_for_microscopists/images/test_image.czi'
images_file_ome_tiff = '/home/keke/data/web/python_for_microscopists/images/test_image.ome.tif'

```

```{python}
%matplotlib inline
# 1) read by PIL

from PIL import Image
img = Image.open(images_file)
#print(type(img))
# img.show()
# change images into arrays
img_array = np.asarray(img)

```


```{python}
# 2) read by matplotlib
import matplotlib.image as mping
img = mping.imread(images_file)
print(type(img))
plt.imshow(img)
plt.colorbar()

```


```{python}
# 3) read by skimage
from skimage import io, img_as_float, img_as_ubyte
img = io.imread(images_file)
print(type(img))
# conver imgae as float
img_float = img_as_float(img)
print(img_float)
plt.imshow(img)
plt.colorbar()
plt.show()

plt.imshow(img_float)
plt.colorbar()
plt.show()

```

2. reading multiple images / time-series files


* czifile

```{python}
import czifile 
img = czifile.imread(images_file_czi)

print(img.shape)

```

* apeer-ometiff-library


3. read all files

using glob

# preprocessing

## PIL

* resize: change the ratio

* thumbnail: orgin ratio

* crop

* paste:

* rotate

```{python}

from PIL import Image
img = Image.open(images_file)
print(img.format)
print(img.mode)
print(img.size)
print(type(img))

# resize
plt.imshow(img)
plt.show()

small_img = img.resize((200,300))
plt.imshow(small_img)
plt.show()

# thumbnail
img.thumbnail((200,300))
print(img.size)
plt.imshow(img)
plt.show()

img.thumbnail((1200,1300))
print(img.size)
plt.imshow(img)
plt.show()

# crop
img = Image.open(images_file)
crop_img = img.crop((0,0,300,300))

plt.imshow(crop_img)
plt.show()

# paste
img.paste(crop_img)

# image
img.rotate(90)

```

## skimage

```{python}
from skimage import io
from matplotlib import pyplot as plt
from skimage.transform import rescale,resize,downscale_local_mean
img = io.imread(images_file,as_gray=True)
plt.imshow(img)
plt.show()

# rescale
img_rescale = rescale(img,1/4,anti_aliasing=True)
plt.imshow(img_rescale)
plt.show()
img_resize =resize(img,(200,200),anti_aliasing=True)
plt.imshow(img_resize)
plt.show()
img_down = downscale_local_mean(img,(4,3))
plt.imshow(img_down)
plt.show()
```


* edge detections

```{python}
from skimage.filters import roberts,sobel,scharr,prewitt

from skimage.feature import canny
edge_canny = canny(img,sigma = 5)
plt.imshow(edge_canny)
plt.show()

```

* deconvolution

psf: point spread function

```{python}
from skimage import restoration
import numpy as np
psf = np.ones((3,3)) / 9
decon,_ = restoration.unsupervised_wiener(img,psf)

plt.imshow(decon,cmap="gray")
plt.show()

```


* example: wound healing

Introduce entropy there, in wound healing experiments, the clean images and the 

```{python}
from skimage import io,restoration
from skimage.filters.rank import entropy
from skimage.morphology import disk
images_file = '/home/keke/data/web/python_for_microscopists/images/scratch.jpg'
img = io.imread(images_file)
entr_img = entropy(img,disk(3))
plt.imshow(entr_img,cmap = "gray")
plt.show()

# try all
from skimage.filters import try_all_threshold
from skimage.filters import threshold_otsu
fig,ax = try_all_threshold(entr_img,figsize = (10,8),verbose =False)
plt.show()

# thereshold is one single number
ts_value = threshold_otsu(entr_img)
print(ts_value)

# sum the value to get percentages
np.sum(entr_img < ts_value)/(np.sum(entr_img < ts_value) + np.sum(entr_img > ts_value))

```


# reference

Almost all the content comes from:
<https://www.youtube.com/watch?v=X_pCiVQ4c4E&list=PLZsOBAyNTZwbIjGnolFydAN33gyyGP7lT>


