[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home | Bioinfor",
    "section": "",
    "text": "How are your there?\n\n\nBe patient?"
  },
  {
    "objectID": "qmd/bioinformatics/genome.html",
    "href": "qmd/bioinformatics/genome.html",
    "title": "Neocleotide",
    "section": "",
    "text": "compare the contigs and scaffolds\n\n\n\n\n\n\n\n\nComparison\nContig\nScalffold\n\n\n\n\nSize\nsmall\nlarge\n\n\nConnectivity\nContigs are often disconnected from each other and represent independent segments of the genome\nconnected by gaps that represent regions of the genome that have not been sequenced or assembled\n\n\nAccuracy\naccurate\nmore prone to errors\n\n\nUtility\nidentifying individual genes, exons, and other genomic features\nstudying the larger-scale structure and organization of the genome\n\n\n\n\n\n\n\n\nglobal statistics\n\n\n\nStats\nvalues\n\n\n\n\nNumber of regions with alternate loci or patches\n207\n\n\nTotal sequence length\n3,099,734,149\n\n\nTotal ungapped length\n2,948,611,470\n\n\nGaps between scaffolds\n349\n\n\nNumber of scaffolds\n473\n\n\nScaffold N50\n67,794,873\n\n\nScaffold L50\n16\n\n\nNumber of contigs\n999\n\n\nContig N50\n57,879,411\n\n\nContig L50\n18\n\n\nTotal number of chromosomes and plasmids\n24\n\n\nNumber of component sequences (WGS or clone)\n35,614\n\n\n\nPrimary assembly\n\nAssembled chromosomes for hg38 are chromosomes 1–22 (chr1–chr22), X (chrX), Y (chrY) and Mitochondrial (chrM).\nUnlocalized sequences (known to belong on a specific chromosome but with unknown order or orientation) are identified by the _random suffix.\nUnplaced sequences (chromosome of origin unknown) are identified by the chrU_ prefix.\n\nGRCh38 ALT contigs, decoy contig\nIn genomics, a genome reference is a collection of genetic sequences that represents the consensus sequence of a species or a population. However, due to the complexity of many genomes, it is often necessary to include additional sequences in the reference to improve its accuracy or completeness. Two types of additional sequences commonly included in genome references are ALT contigs and decoy contigs.\nALT contigs, also known as alternative contigs, are additional contigs that represent alternative versions of genomic regions that are highly variable or difficult to assemble. These regions may include centromeres, telomeres, or segmental duplications. ALT contigs are typically labeled with an identifier that distinguishes them from the primary reference contigs, which are usually labeled with sequential numbers or letters.\nDecoy contigs, on the other hand, are artificial sequences that are added to the reference to represent regions that are likely to be mistaken for real genomic regions during the sequencing or mapping process. These regions may include repetitive elements, transposable elements, or microbial contaminants. Decoy contigs are typically designed to be similar in length and complexity to real genomic regions, but with unique sequence content that can be used to distinguish them from real genomic regions.\nThe inclusion of ALT contigs and decoy contigs in genome references can help improve the accuracy and completeness of genomic analyses, such as variant calling and read mapping, by reducing the number of false positives and false negatives.\nScaffolds?\n\nPlaced scaffolds: the scaffolds have been placed within a chromosome.\nUnlocalized scaffolds: although the chromosome within which the scaffold occurs is known, the scaffold’s position or orientation is not known.\nUnplaced scaffolds: it is not known which chromosome the scaffold belongs to.\n\nwhat is the masked and soft-masked sequence types?\n\n‘dna’ - unmasked genomic DNA sequences.\n‘dna_rm’ - masked genomic DNA. Interspersed repeats and low complexity regions are detected with the RepeatMasker tool and masked by replacing repeats with ’N’s.\n‘dna_sm’ - soft-masked genomic DNA. All repeats and low complexity regions have been replaced with lowercased versions of their nucleic base\n\nreference\n\nhttps://gatk.broadinstitute.org/hc/en-us/articles/360035890951-Human-genome-reference-builds-GRCh38-or-hg38-b37-hg19\nhttps://www.ncbi.nlm.nih.gov/grc/help/definitions/\nhttps://groups.google.com/a/soe.ucsc.edu/g/genome/c/Pvl3eAH0e_Y"
  },
  {
    "objectID": "qmd/bioinformatics/genome.html#mirna",
    "href": "qmd/bioinformatics/genome.html#mirna",
    "title": "Neocleotide",
    "section": "miRNA",
    "text": "miRNA"
  },
  {
    "objectID": "qmd/bioinformatics/genome.html#lncrna",
    "href": "qmd/bioinformatics/genome.html#lncrna",
    "title": "Neocleotide",
    "section": "lncRNA",
    "text": "lncRNA"
  },
  {
    "objectID": "qmd/bioinformatics/index.html",
    "href": "qmd/bioinformatics/index.html",
    "title": "Bioinformatics",
    "section": "",
    "text": "Bioinformatics tutorial"
  },
  {
    "objectID": "qmd/bioinformatics/data_format.html",
    "href": "qmd/bioinformatics/data_format.html",
    "title": "data format",
    "section": "",
    "text": "Proteins\n\n\nQ&A\n\nwhat is difference between ensembl and UCSC?"
  },
  {
    "objectID": "qmd/bioinformatics/ncbi.html",
    "href": "qmd/bioinformatics/ncbi.html",
    "title": "NCBI",
    "section": "",
    "text": "https://www.ncbi.nlm.nih.gov/books/NBK54016/\nhttps://www.ncbi.nlm.nih.gov/bioproject/\n\n\n\n\n\n\n\nWhat can we retrive from gene database?\nGene supplies gene-specific connections in the nexus of map, sequence, expression, structure, function, citation, and homology data.\n\ngene\npublished papers\nsnps\ngeneRIF: gene referene into functions\nGene ontology\n\nWhat is refeseq?\n\nIt is a database\nwhen you search with NCBI Gene, there are filter options which you can select RefSeq/RefSeqGene/Ensembl and so on.\n\ntranscript\n\nN…: experiment validated transcript\nX…: predicted transcript\n\n\n\n\n\nkeywords: variant, variant classification(Benign/Likely Benign; Uncertain(VUS);Likely Pathogenic/Pathogenic)\n\nhow to use clinvar?\n\nsearch in https://www.ncbi.nlm.nih.gov/clinvar/\nE-utilities and Entrez Direct\n\nhow download clinvar database?\n\nhttps://ftp.ncbi.nlm.nih.gov/pub/clinvar/\nhttps://ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited\nhttps://ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited/\nhttps://ftp.ncbi.nlm.nih.gov/pub/clinvar/xml/\n\n\n\n\n\n\nupload a sequence and we could get the conserved domains"
  },
  {
    "objectID": "qmd/bioinformatics/ncbi.html#blast",
    "href": "qmd/bioinformatics/ncbi.html#blast",
    "title": "NCBI",
    "section": "2.1 BLAST",
    "text": "2.1 BLAST"
  },
  {
    "objectID": "qmd/bioinformatics/ncbi.html#comparative-genome-viewer",
    "href": "qmd/bioinformatics/ncbi.html#comparative-genome-viewer",
    "title": "NCBI",
    "section": "2.2 Comparative Genome Viewer",
    "text": "2.2 Comparative Genome Viewer"
  },
  {
    "objectID": "qmd/bioinformatics/ncbi.html#e-utilities",
    "href": "qmd/bioinformatics/ncbi.html#e-utilities",
    "title": "NCBI",
    "section": "2.3 E-utilities",
    "text": "2.3 E-utilities\n\nNine E-utilities\n\nEInfo –> database statistics\nESearch –> text search\nEPost –> UID uploads\nESummary –> document summary downloads\nEFetch –> data record downloads\nELink –> Entrez links\n-related: Neighbors in same database\n-target: Links in different database\n-cited: reference to this parer(pubmed)\n-cites: publication reference list\n-cmd: history,neighbor,acheck\nEGQuery –> global query\nESpell –> spelling suggestions\nEciMatch –> batch citation searching in PubMed\n\npipeline\n\nRetrieving data records matching an Entrez query\n\nESearch -> Esummary\nEsearch - > EFetch\n\nRetrieving data records matching a list of UIDs\n\nEsearch -> ELink\nEPost -> ELink\n\nFinding UIDs linked to a set of records\n\nEPost -> ESearch\nELikn -> ESearch\n\nLimiting a set of records with an Entrez query\n\nESearch -> ELink -> ESummary\nESearch -> ELink -> EFetch\n\nRetrieving data records in database B linked to records in database A matching an Entrez query\n\nEPost -> ESearch -> ESummary\nEPOst -> ESearch -> EFetch\n\nRetrieving data records from a subset of an ID list defined by an Entrez query\n\nEPost -> ESearch -> ESummary\nEPost -> ESearch -> EFetch\n\nRetrieving a set of data records, defined by an Entrez query, in database B from a larger set of records linked to a list of UIDs in database A\n\nEPost -> ELink -> ESearch -> ESummary\nEPost -> ELink -> ESearch -> EFetch\n\n\nEntrez Direct: E-utilities on the Unix Command Line\n\nHow to add keys\nexport NCBI_API_KEY=unique_api_key\nresources\n\nEntrez Unique Identifiers (UIDs) for selected databases\n\nexample\n\nsearch pubmed\n# 1) examples context \"NLRP3 AND TCGA\"\nesearch -db pubmed -query \"NLRP3 AND TCGA\" | esummary\n\n# 2) search with date options\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2022 -maxdate 2023\n\n# 3) sort by revelence or title or pub datetype\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nefetch -format xml\n\n# 4) search pubmed, fetch the format, and extract the authors,your could use `-sep` to seprate element,or `-tab` to sperate block\nesearch -db pubmed -query \"selective serotonin reuptake inhibitor\" |\nefetch -format xml |\nxtract -pattern PubmedArticle -block Author -element LastName, Initials\n\n# 5) search pubmed with text, return the medline format\nesearch -db pubmed -query \"NLRP3 AND TCGA\" | efetch -format medline\n\n# 6) search pubmed with text and extract the 1) journal 2) title  3) abastrct 4) author 5) keyword\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nefetch -format xml |\nxtract -pattern PubmedArticle \\\n-block Journal  -element \"Title\" \\\n-block Article -element \"ArticleTitle\" \\\n-block Author -sep \" \" -tab \", \" -element Initials,LastName \\\n-block KeywordList -sep \",\" -element \"Keyword\" \\\n-block Abstract -element \"AbstractText\"\n\n# 7) search pubmed text, and get the related results\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nelink -related | \nefetch -xml\n\n# 8) search pubmed text, and get the related paper\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nelink -target pubmed \n\n# 9) search pubmed text, and get the related genes/protein...\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nelink -target gene \n\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nelink -target protein \nsearch gene\n# 1) search gene in Y in homo sampiens, use other programming tools to find the gene in forward or reverse strand\nesearch -db gene -query  \"Homo sapiens [ORGN] AND Y [CHR]\" |\nefilter -query \"alive [PROP]\" |\nesummary |\nxtract -pattern DocumentSummary -NAME Name \\\n-block GenomicInfoType -match \"ChrLoc:Y\" \\\n-element \"&NAME\", ChrLoc, ChrAccVer, ChrStart, ChrStop\n\n# 2) search a gene get its  transcript\nesearch -db gene -query \"TP53[gene name] AND Homo sapiens[ORGN]\"|\nefetch -format fasta\nsearch proteins\nsearch proteins for each genes using elink\nesearch -db gene -query \"NLPR3 AND Homo sapiens [ORGN] AND alive [prop]\"|\nelink -target protein -name gene_protein_refseq -cmd neighbor | \nxtract -pattern LinkSet -block IdList -element Id -block LinkSetDb -element Id\nxtract tips\n\npattern  with capitals, create a variable , invoke it with &STRINGS\nA slash (/) to indicate Parent/Child construction\nesearch -db pubmed -query \"NLRP3 AND TCGA\" -datetype PDAT -mindate 2021 -maxdate 2023 -sort \"Pub Date\" |\nefetch -format xml |\nxtract -pattern PubmedArticle -element PubDate/Year\n\nOthers\n\nalive[prop]: currently alive"
  },
  {
    "objectID": "qmd/bioinformatics/ncbi.html#xml-and-xml2",
    "href": "qmd/bioinformatics/ncbi.html#xml-and-xml2",
    "title": "NCBI",
    "section": "2.4 xml and xml2",
    "text": "2.4 xml and xml2"
  },
  {
    "objectID": "qmd/bioinformatics/tcga.html",
    "href": "qmd/bioinformatics/tcga.html",
    "title": "TCGA",
    "section": "",
    "text": "Diagnostic Slide\nTissue Slide\nWGX\nWXS\nRNA-seq\nmiRNA-seq\nATAC-seq\nGenotyping Array\nMethylation Array\n\n\n\n\nhttps://pathsocjournals.onlinelibrary.wiley.com/doi/full/10.1002/path.5028"
  },
  {
    "objectID": "qmd/bioinformatics/tcga.html#tcgabiolinks",
    "href": "qmd/bioinformatics/tcga.html#tcgabiolinks",
    "title": "TCGA",
    "section": "TCGAbiolinks",
    "text": "TCGAbiolinks"
  },
  {
    "objectID": "qmd/bioinformatics/tcga.html#data_transfer_tool",
    "href": "qmd/bioinformatics/tcga.html#data_transfer_tool",
    "title": "TCGA",
    "section": "Data_Transfer_Tool",
    "text": "Data_Transfer_Tool\n\ndownload the manifest\ndownload with gdc-client (redo with split manifest)\n#!/bin/bash\nusage ()\n{\necho 'Usage : command <manifest.file> <cores>'\nexit\n}\n\nif [ $# != 2 ];then\nusage\nfi \n# 1) parrelle using xargs; 2) download with gdc-client\nwc -l $1 >> logs.txt\ntail -n +2 $1 | \\\ncut -f1 |\\\nxargs -n 1 -P $2 \\\n/home/keke/app/conda/envs/tcga/bin/gdc-client download &\nwait\n# 3) calculate time\nend=`date +%s`\nruntime=$((end-start))\necho \">>>Running Finished....\" >> logs.txt\necho \">>>Running times is ....\" >> logs.txt\necho $runtime >>logs.txt"
  },
  {
    "objectID": "qmd/bioinformatics/tcga.html#gdc-application-programming-interface-api",
    "href": "qmd/bioinformatics/tcga.html#gdc-application-programming-interface-api",
    "title": "TCGA",
    "section": "gdc-application-programming-interface-api",
    "text": "gdc-application-programming-interface-api\nPASS"
  },
  {
    "objectID": "qmd/ml/index.html",
    "href": "qmd/ml/index.html",
    "title": "Machine learning",
    "section": "",
    "text": "Machine learning"
  },
  {
    "objectID": "qmd/tools/index.html",
    "href": "qmd/tools/index.html",
    "title": "Tools",
    "section": "",
    "text": "This is about useful tools that could help improve us to do bioinformatics job."
  },
  {
    "objectID": "qmd/sas/index.html",
    "href": "qmd/sas/index.html",
    "title": "SAS",
    "section": "",
    "text": "What is SAS"
  },
  {
    "objectID": "qmd/ml/microscopist.html",
    "href": "qmd/ml/microscopist.html",
    "title": "Python for microscopist",
    "section": "",
    "text": "processing HE\nprocessing immune staining"
  },
  {
    "objectID": "qmd/tools/git.html",
    "href": "qmd/tools/git.html",
    "title": "git",
    "section": "",
    "text": "Q&A\n\ngit globa options\n# show global options\ngit config --list\n\n# set git editor\ngit config --global core.editor \"code --wait\"\ngit config -e \ngit config --global -e \nget git status short\ngit status \ngit status -s\ncreate new branch\n# create new brance\ngit checkout -b <newbranch>\n\n# back to mater\ngit checkout master\n\n# merge new brache into master(should be in master branche)\ngit merge <newbranch>\nclone with ssh\ngit clone username@ip_address:/path/to/your/git\nbuild the data\n# 1) build new data\ngit init\n\n# 2) rename branch\ngit rename -m master current\n\n# 3) add remote data\ngit remote add <repo-name> username@ip_address:/path/to/your/git\n\n# 4) pull or push\ngit pull \ngit push"
  },
  {
    "objectID": "qmd/tools/restful.html",
    "href": "qmd/tools/restful.html",
    "title": "restful",
    "section": "",
    "text": "what is restful api\nThe full name is …\nHow to use it (if websites have api)?\nconstruct the paper\nAre there tools available that would make this simple for us?\nHow to achieve/implement it with Python programming?\nusing ensemle api"
  },
  {
    "objectID": "qmd/tools/quarto_diagram.html",
    "href": "qmd/tools/quarto_diagram.html",
    "title": "quarto diagram",
    "section": "",
    "text": "Graphviz\n\n\n\n\n\n\n\nG\n\n  \n\nrun\n\n run   \n\nintr\n\n intr   \n\nrun–intr\n\n   \n\nkernel\n\n kernel   \n\nrun–kernel\n\n   \n\nrunbl\n\n runbl   \n\nintr–runbl\n\n   \n\nrunbl–run\n\n   \n\nzombie\n\n zombie   \n\nkernel–zombie\n\n   \n\nsleep\n\n sleep   \n\nkernel–sleep\n\n   \n\nrunmem\n\n runmem   \n\nkernel–runmem\n\n   \n\nsleep–runmem\n\n   \n\nswap\n\n swap   \n\nsleep–swap\n\n   \n\nrunswap\n\n runswap   \n\nswap–runswap\n\n   \n\nrunswap–runmem\n\n   \n\nnew\n\n new   \n\nrunswap–new\n\n   \n\nnew–runmem"
  },
  {
    "objectID": "qmd/bioinformatics/sc.html",
    "href": "qmd/bioinformatics/sc.html",
    "title": "single cell",
    "section": "",
    "text": "Guidelines for annotate single cell?\nhttps://sci-hub.mksa.top/10.1038/s41596-021-00534-0\nthree steps\n 1. annotate use predefined set of marker genes\n\n     * marker based tools\n\n     * reference based tools\n\n 2.  manual annotation\n\n     * lower confidence, conflicting or absent cell labels, expert manual annotation is required\n\n     * \n\n 3. verification(1. other methods, 2. new validation experiments)\n\n     * statistical methods\n\n     * expert"
  },
  {
    "objectID": "qmd/tools/quarto_tools.html",
    "href": "qmd/tools/quarto_tools.html",
    "title": "quarto tools",
    "section": "",
    "text": "citatation\n\nyour should prepare\n\ncsl file: download from github\nhttps://github.com/citation-style-language/styles\nbib: you could prepare using endnote\n@article{knuth:1984,\n  title={Literate Programming},\n  author={Donald E. Knuth},\n  journal={The Computer Journal},\n  volume={27},\n  number={2},\n  pages={97--111},\n  year={1984},\n  publisher={Oxford University Press}\n}\n\ninclude it in the qmd yaml header; use with [@index] ; insert the reference\n---\ntitle: \"cite demo\"\nbibliography: references.bib\n---\nsome words[@knuth:1984]\n\n## References\n::: {#refs}\n:::"
  },
  {
    "objectID": "qmd/tools/r_args.html",
    "href": "qmd/tools/r_args.html",
    "title": "how to use pass argument in R?",
    "section": "",
    "text": "what is {} {{}}?\n\n\nwhat is parse/eval/substitue?\n\n\nIn dplyr, what is vars, across, everything?"
  },
  {
    "objectID": "qmd/tools/nginx.html",
    "href": "qmd/tools/nginx.html",
    "title": "nginx",
    "section": "",
    "text": "perfrom\n\nnginx.conf contains\n\nhttp serve the directory\nevents\nMINE\nnigix comes with default MINE types\nlocation\nalias\ntry_files\nrewrite and redirect\n\nhttp {\n    # MINE teypes\n    #types {\n    #    text/css css;\n    #    text/html html;\n    #}\n\n    include mime.types\n\n    # server\n    server {\n        listen 80;\n        root /path;\n\n        # get locations\n        location /fruits{\n            root /path ;\n        }\n\n        location /carbs{\n            alias /path/fruits;\n\n        }\n\n        # try files\n        location /veges{\n            root /path;\n            try_files /veges/vege.html /veges/index.html = 404;\n        }\n\n        # count regular expression ~* => regular expression\n        location ~* /count/[0-9]{\n            root /path\n            try_files /index.html =404;\n        }\n\n        # return\n        location /crops {\n            return 307 /fruits;\n        }\n\n        # rewrite/redirect\n        rewrite ^/number/(\\w+) /counts/$1\n    }\n}\nload balancer"
  },
  {
    "objectID": "qmd/bioinformatics/ensembl.html",
    "href": "qmd/bioinformatics/ensembl.html",
    "title": "Ensembl",
    "section": "",
    "text": "How?"
  },
  {
    "objectID": "qmd/pipeline/mrna.html",
    "href": "qmd/pipeline/mrna.html",
    "title": "mRNA pipline",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "qmd/tools/network.html",
    "href": "qmd/tools/network.html",
    "title": "Network",
    "section": "",
    "text": "how to proxy?\nwho to reverse proxy?\nhow to add https\nnginx.conf contains\n\nhttp serve the directory\nevents\nMINE\nnigix comes with default MINE types\nlocation\nalias\ntry_files\nrewrite and redirect\n\nhttp {\n    # MINE teypes\n    #types {\n    #    text/css css;\n    #    text/html html;\n    #}\n\n    include mime.types\n\n    # server\n    server {\n        listen 80;\n        root /path;\n\n        # get locations\n        location /fruits{\n            root /path ;\n        }\n\n        location /carbs{\n            alias /path/fruits;\n\n        }\n\n        # try files\n        location /veges{\n            root /path;\n            try_files /veges/vege.html /veges/index.html = 404;\n        }\n\n        # count regular expression ~* => regular expression\n        location ~* /count/[0-9]{\n            root /path\n            try_files /index.html =404;\n        }\n\n        # return\n        location /crops {\n            return 307 /fruits;\n        }\n\n        # rewrite/redirect\n        rewrite ^/number/(\\w+) /counts/$1\n    }\n}\nload balancer"
  },
  {
    "objectID": "qmd/tools/docker.html",
    "href": "qmd/tools/docker.html",
    "title": "docker",
    "section": "",
    "text": "rstudio\n\nHave a rstudio in docker(version=4.2)\n\nhttps://rocker-project.org/images/versioned/rstudio.html\nhttps://hub.docker.com/r/rocker/rstudio\n# pull images (Make sure the version is what you want)\ndocker pull rocker/rstudio:4.2\n\n# run it (should not change the image port in this case)\ndocker run --rm -ti -p 8686:8787 rocker/rstudio:4.2\n\n# run it with user/password\n\n# stop it \ndocker stop <CONTAINER ID>\n\nhow to access using public ip address?"
  },
  {
    "objectID": "qmd/tools/r.html",
    "href": "qmd/tools/r.html",
    "title": "R",
    "section": "",
    "text": "clindf\n\nwhat tools can be used to develop r packages?\n\ndevtools\nusethis\n\nhow to\n\ncreate a pckages?\n\nusethis::create_package()\n\ncreate a script?\n\nuse_r\nwrite function\n\ncreate document(help page for each function)?\n\nroxygen2\ndocument()\n\nimport package and function?\n\nuse_package()\n::\n\ncreate vignettes?\n\nuse_vignette()\nwrite your rmd file\n\ncreate pkgs websites?\n\npkgdown::build_site()\n\ncheck?\n\ndevtools::check()\n\nbuild pkgs?"
  },
  {
    "objectID": "qmd/pipeline/rna.html",
    "href": "qmd/pipeline/rna.html",
    "title": "RNA pipline",
    "section": "",
    "text": "The GDC mRNA quantification analysis pipeline measures gene level expression with STAR as raw read counts.\nfor details about pipeline, please view https://docs.gdc.cancer.gov/Data/Bioinformatics_Pipelines/Expression_mRNA_Pipeline/\nfor details about STAR, plesae view https://raw.githubusercontent.com/alexdobin/STAR/master/doc/STARmanual.pdf\nIn this chapter,\n\nfirst summarise introduce the alignment\n\nSTAR\nbowtie\n\nWhat is RSEM?\nsamol\n\n\n\n\n\nflowchart TD\n    input[fastq]\n    output[tpm/fpkm/count]\n\n    input --> output"
  },
  {
    "objectID": "qmd/pipeline/rna.html#star",
    "href": "qmd/pipeline/rna.html#star",
    "title": "RNA pipline",
    "section": "STAR",
    "text": "STAR"
  },
  {
    "objectID": "qmd/pipeline/rna.html#some-preparations-about-star",
    "href": "qmd/pipeline/rna.html#some-preparations-about-star",
    "title": "RNA pipline",
    "section": "Some preparations about STAR",
    "text": "Some preparations about STAR\n1. strand information\n\n2-pass mode\n\n    * more splices reads mapping"
  },
  {
    "objectID": "qmd/pipeline/rna.html#rsem",
    "href": "qmd/pipeline/rna.html#rsem",
    "title": "RNA pipline",
    "section": "RSEM",
    "text": "RSEM"
  },
  {
    "objectID": "qmd/pipeline/rna.html#kallisto",
    "href": "qmd/pipeline/rna.html#kallisto",
    "title": "RNA pipline",
    "section": "kallisto",
    "text": "kallisto"
  },
  {
    "objectID": "qmd/tools/network.html#install",
    "href": "qmd/tools/network.html#install",
    "title": "Network",
    "section": "install",
    "text": "install\n\ninstall docker\n\nhttps://docs.docker.com/engine/install/binaries/\nhttps://www.kali.org/docs/containers/installing-docker-on-kali/\n\ndocker basic commnad\n\n# docker version\n# containers\ndocker ps\ndocker ps -a\ndocker stop <id>\n\n# showing images\ndocker images\n# remove images\ndocker rmi\n\n# pull images \ndocker pull <iamge>\n\n# pull and run images\ndocker run <iamge:tag>\n\n# run ubuntu\ndocker run ubuntu sleep 100 \n\n# run: attach detached\ndocker run -d <container>\n\ndocker attach <id>\n\n# inspect containder\ndocker inspect <id>\n\n# check logs\ndocker logs <id>\n\ndocker params\n\n-i: interactive mode\n-t: pesuodo terminal\n-p: port mapping\neach container has its own ip, which can only be acessed in containder host\n-v: volumn mappping -> data persistent\n-e: set enviroment variables\n\ncreate images\n\nFROM Ubuntu\n\nRUN apt-get update\nRUN apt-get install python\n\nRUN pip install flask\n\nCOPY . ???\n\nENTRYPOINT ???\n\nCMD [\"command\", \"param1\"]\ndocker build Dockerfile -t <image_name>"
  },
  {
    "objectID": "qmd/tools/network.html#docker-1",
    "href": "qmd/tools/network.html#docker-1",
    "title": "Network",
    "section": "Docker",
    "text": "Docker\n\nrstudio config\n\nHave a rstudio in docker(version=4.2)\n\nhttps://rocker-project.org/images/versioned/rstudio.html\nhttps://hub.docker.com/r/rocker/rstudio\n# pull images (Make sure the version is what you want)\ndocker pull rocker/rstudio:4.2\n\n# run it (should not change the image port in this case), with password\n# inorder to make it configuration persistent, your should map the /home/rstudio/ directory with the same directory(In which you saved the configurations previously)\ndocker run --rm -ti -e PASSWORD=<passwd> -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/ -p 8686:8787 rocker/rstudio:4.2\n\n# how to make packages persistent and rstudio configs persistent \n# 1) Check the libs path `.libPaths()`\n# 2) rewrite the `.Renviron` with  `R_LIBS_USER` and `R_LIBS`\n# 3) relaod `R` and install the packages\n# 4) your could check the `r_lib` fold first then reload the docker images to see if the package could be reloaded\nmkdir ~/.Renviron\nR_LIBS_USER=/home/rstudio/r_lib\nR_LIBS=/home/rstudio/r_lib:/usr/local/lib/R/site-library:/usr/local/lib/R/library\n\n\n# mount a second volumn\ndocker run --rm -ti \\\n    -e PASSWORD=happy_password\\\n    -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/\\\n    -v /home/keke/data/:/home/rstudio/data/\\\n    -p 8686:8787 \\\n    rocker/rstudio:4.2\n\n# run in background(--detached -d)\ndocker run --rm -ti \\\n    -e PASSWORD=happy_password\\\n    -d\\\n    -v /home/keke/data2/docker/rstudio/rs1:/home/rstudio/\\\n    -v /home/keke/data/:/home/rstudio/data/\\\n    -p 8686:8787 \\\n    rocker/rstudio:4.2\n    \n# stop it \ndocker stop <CONTAINER ID>\n\n\ndocker file permission"
  },
  {
    "objectID": "qmd/tools/network.html#docker-app",
    "href": "qmd/tools/network.html#docker-app",
    "title": "Network",
    "section": "Docker app",
    "text": "Docker app\n\nrstudio config\n\nHave a rstudio in docker(version=4.2)\n\nhttps://rocker-project.org/images/versioned/rstudio.html\nhttps://hub.docker.com/r/rocker/rstudio\n# pull images (Make sure the version is what you want)\ndocker pull rocker/rstudio:4.2\n\n# run it (should not change the image port in this case), with password\n# inorder to make it configuration persistent, your should map the /home/rstudio/ directory with the same directory(In which you saved the configurations previously)\ndocker run --rm -ti -e PASSWORD=<passwd> -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/ -p 8686:8787 rocker/rstudio:4.2\n\n# how to make packages persistent and rstudio configs persistent \n# 1) Check the libs path `.libPaths()`\n# 2) rewrite the `.Renviron` with  `R_LIBS_USER` and `R_LIBS`\n# 3) relaod `R` and install the packages\n# 4) your could check the `r_lib` fold first then reload the docker images to see if the package could be reloaded\nmkdir ~/.Renviron\nR_LIBS_USER=/home/rstudio/r_lib\nR_LIBS=/home/rstudio/r_lib:/usr/local/lib/R/site-library:/usr/local/lib/R/library\n\n\n# mount a second volumn\ndocker run --rm -ti \\\n    -e PASSWORD=happy_password\\\n    -v /home/keke/data/tutorial/docker/rs1:/home/rstudio/\\\n    -v /home/keke/data/:/home/rstudio/data/\\\n    -p 8686:8787 \\\n    rocker/rstudio:4.2\n\n# run in background(--detached -d)\ndocker run --rm -ti \\\n    -e PASSWORD=happy_password\\\n    -d\\\n    -v /home/keke/data2/docker/rstudio/rs1:/home/rstudio/\\\n    -v /home/keke/data/:/home/rstudio/data/\\\n    -p 8686:8787 \\\n    rocker/rstudio:4.2\n\n# stop it \ndocker stop <CONTAINER ID>\n\n\nrun docker without root permission\n\n\nrun ubuntu\ndocker run ubuntu sleep 5\n\n\n\ndocker network\n* bride[default]:  `docker run ubuntu`\n\n* none:  `docker run ubuntu --network=none`\n\n* host:  `docker run ubuntu --network=host`\n\n* create sub network\n\n\nvoumnes\ndocker volumne create data_volumn\n* -v\n\n* --mount\n\n\ndocker-compose\n\n\ndocker registry\n\nprivate\n\ndocker run -d --name registry\n\ndocker image tag my-image localhost:5000/my-image\ndocker push localhost:5000/my-image\ndocker pull localhost:5000/my-image\n\n\norchestrate\n\n\ndocker swarm\ndocker service --replicas=3 my-web\n\n\n\nkubernetes"
  },
  {
    "objectID": "qmd/ml/microscopist.html#images-in-python",
    "href": "qmd/ml/microscopist.html#images-in-python",
    "title": "Python for microscopist",
    "section": "images in python",
    "text": "images in python"
  },
  {
    "objectID": "qmd/ml/microscopist.html#pil",
    "href": "qmd/ml/microscopist.html#pil",
    "title": "Python for microscopist",
    "section": "PIL",
    "text": "PIL\n\nresize: change the ratio\nthumbnail: orgin ratio\ncrop\npaste:\nrotate\n\n\nfrom PIL import Image\nimg = Image.open(images_file)\nprint(img.format)\nprint(img.mode)\nprint(img.size)\nprint(type(img))\n\n# resize\nplt.imshow(img)\nplt.show()\n\nsmall_img = img.resize((200,300))\nplt.imshow(small_img)\nplt.show()\n\n# thumbnail\nimg.thumbnail((200,300))\nprint(img.size)\nplt.imshow(img)\nplt.show()\n\nimg.thumbnail((1200,1300))\nprint(img.size)\nplt.imshow(img)\nplt.show()\n\n# crop\nimg = Image.open(images_file)\ncrop_img = img.crop((0,0,300,300))\n\nplt.imshow(crop_img)\nplt.show()\n\n# paste\nimg.paste(crop_img)\n\n# image\nimg.rotate(90)\n\nJPEG\nRGB\n(639, 513)\n<class 'PIL.JpegImagePlugin.JpegImageFile'>\n\n\n\n\n\n\n\n\n(200, 161)\n\n\n\n\n\n(200, 161)"
  },
  {
    "objectID": "qmd/ml/microscopist.html#skimage",
    "href": "qmd/ml/microscopist.html#skimage",
    "title": "Python for microscopist",
    "section": "skimage",
    "text": "skimage\n\nfrom skimage import io\nfrom matplotlib import pyplot as plt\nfrom skimage.transform import rescale,resize,downscale_local_mean\nimg = io.imread(images_file,as_gray=True)\nplt.imshow(img)\nplt.show()\n\n# rescale\nimg_rescale = rescale(img,1/4,anti_aliasing=True)\nplt.imshow(img_rescale)\nplt.show()\nimg_resize =resize(img,(200,200),anti_aliasing=True)\nplt.imshow(img_resize)\nplt.show()\nimg_down = downscale_local_mean(img,(4,3))\nplt.imshow(img_down)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nedge detections\n\n\nfrom skimage.filters import roberts,sobel,scharr,prewitt\n\nfrom skimage.feature import canny\nedge_canny = canny(img,sigma = 5)\nplt.imshow(edge_canny)\nplt.show()\n\n\n\n\n\ndeconvolution\n\npsf: point spread function\n\nfrom skimage import restoration\nimport numpy as np\npsf = np.ones((3,3)) / 9\ndecon,_ = restoration.unsupervised_wiener(img,psf)\n\nplt.imshow(decon,cmap=\"gray\")\nplt.show()\n\n\n\n\n\nexample: wound healing\n\nIntroduce entropy there, in wound healing experiments, the clean images and the\n\nfrom skimage import io,restoration\nfrom skimage.filters.rank import entropy\nfrom skimage.morphology import disk\nimages_file = '/home/keke/data/web/python_for_microscopists/images/scratch.jpg'\nimg = io.imread(images_file)\nentr_img = entropy(img,disk(3))\nplt.imshow(entr_img,cmap = \"gray\")\nplt.show()\n\n# try all\nfrom skimage.filters import try_all_threshold\nfrom skimage.filters import threshold_otsu\nfig,ax = try_all_threshold(entr_img,figsize = (10,8),verbose =False)\nplt.show()\n\n# thereshold is one single number\nts_value = threshold_otsu(entr_img)\nprint(ts_value)\n\n# sum the value to get percentages\nnp.sum(entr_img < ts_value)/(np.sum(entr_img < ts_value) + np.sum(entr_img > ts_value))\n\n\n\n\n\n\n\n2.134854929499421\n\n\n0.2891522491349481"
  }
]